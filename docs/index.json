[{"categories":["Network"],"content":"Automation tools: Paramiko, Netmiko, NAPALM, Ansible, Nornir or ...?","date":"2022-05-15","objectID":"/posts/automation-tools/automation-tools/","tags":["EVE-NG","Automation","Nornir"],"title":"Automation tools: Paramiko, Netmiko, NAPALM, Ansible, Nornir or ...?","uri":"/posts/automation-tools/automation-tools/"},{"categories":["Network"],"content":" Last post was all about setting up a simple EVE-NG lab with 3 different vendors (Cisco, Juniper and Huawei). In this post, let’s get our hands dirty and get some network automation action going. ","date":"2022-05-15","objectID":"/posts/automation-tools/automation-tools/:0:0","tags":["EVE-NG","Automation","Nornir"],"title":"Automation tools: Paramiko, Netmiko, NAPALM, Ansible, Nornir or ...?","uri":"/posts/automation-tools/automation-tools/"},{"categories":["Network"],"content":"1 What are the differences of Paramiko, Netmiko, NAPALM, Ansible and Nornir? Before we start network automation lab, I feel obligated to discuss a bit about how different automation tools work and what their differences are. I’m not an expert in any of the following tools by any stretch, but I will try my best to describe these in layman’s terms based on my experience. Paramiko: Just a handy Python SSH library, used for ssh-ing (obviously) to devices. Netmiko: Another Python SSH library which is based on Paramiko, but geared more towards network devices. Unlike Paramiko, it supports Telnet. When combined with Python scripts, this tool is sufficient to kickstart your network automation. Very easy to get started and have results of your commands printed and screen scrape the things you need with regex, or even better if you utilize TextFSM \u0026 NTC templates for parsing results. Little caveat is that you must handle multi-threading yourself if the intention is to use Netmiko for large scale network. NAPALM: A Python library/framework that supports multiple vendors using API. It’s an abstraction framework, and NAPALM’s underlying network drivers will enable it to return the same output for your request (Eg: get_interfaces, get_facts) regardless of which type of device you’re working on. If your devices are not fully supported, you have the option to write your own Python library (which I tried, and I don’t recommend, will discuss in detail later in this post). NAPALM framework can be used in conjunction with Ansible, Salt and Nornir. Ansible: One of the most famous automation tools. The thing with Ansible is that you have to write Ansible playbooks in YAML, which is kind of a double-edged sword; it doesn’t require you to know how to code in Python, but working with only YAML takes away the flexibility of your automation tasks. Ansible IMO is better suited for overall IT environment rather than network devices. Nornir: A Python framework made specifically for network devices, developed and maintained by the same guys who did NAPALM and Netmiko. It’s 100% Python, framework is written in Python, and you write Python code in order to use Nornir. NAPALM and Netmiko libraries can act as getters and connection driver for Nornir. Also, Nornir is multi-threaded and it’s absurdly fast compared to Ansible. There are some other automation tools that I didn’t mention; like Scrapli, Puppet, Chef, Salt, pyATS, etc. ","date":"2022-05-15","objectID":"/posts/automation-tools/automation-tools/:1:0","tags":["EVE-NG","Automation","Nornir"],"title":"Automation tools: Paramiko, Netmiko, NAPALM, Ansible, Nornir or ...?","uri":"/posts/automation-tools/automation-tools/"},{"categories":["Network"],"content":"2 Testing out automation tools (Netmiko, NAPALM, Nornir) In this section, I’m going to show basic usage of some of the tools covered above. ","date":"2022-05-15","objectID":"/posts/automation-tools/automation-tools/:2:0","tags":["EVE-NG","Automation","Nornir"],"title":"Automation tools: Paramiko, Netmiko, NAPALM, Ansible, Nornir or ...?","uri":"/posts/automation-tools/automation-tools/"},{"categories":["Network"],"content":"2.1 SSH Connectivity to devices First, enable SSH on each device: Juniper Junos: 20.4R3.8 set system login user juniper class super-user authentication plain-text-password set system services ssh root-login allow set system services ssh protocol-version v2 set system services ssh connection-limit 10 Huawei VRP: 8.180 aaa local-user huawei password irreversible-cipher $1c$jF... local-user huawei service-type telnet ssh local-user huawei state block fail-times 3 interval 5 user-interface vty 0 4 authentication-mode aaa user privilege level 3 idle-timeout 0 0 stelnet server enable ssh user huawei ssh user huawei authentication-type all ssh user huawei service-type all ssh authorization-type default password Cisco IOS-XR: 6.1.3 crypto key generate rsa ssh server v2 line console transport input all Above commands will give us full SSH connectivity from outside VM I'm using. Both my EVE-NG VM and my Linux VM (Kali Linux) are configured as NAT, and I will run my automation setup on Kali Linux. Since my NAT is using 192.168.13.0/24 subnet, I've modified interface addresses between routers to 10.0.XY.X, instead of 192.168.XY.X pool. All 3 devices are connected to Management(Cloud0) node, ensuring their connectivity to my Kali Linux. ","date":"2022-05-15","objectID":"/posts/automation-tools/automation-tools/:2:1","tags":["EVE-NG","Automation","Nornir"],"title":"Automation tools: Paramiko, Netmiko, NAPALM, Ansible, Nornir or ...?","uri":"/posts/automation-tools/automation-tools/"},{"categories":["Network"],"content":"2.2 Netmiko Following is a very simple example of how to use Netmiko ConnectHandler to retrieve show command output from routers. In this example, send_command() method will return interface description and IP addresses of each device. If you want to convert the result to structured data, you might want to use TextFSM \u0026 NTC templates. #netmiko_test.py from netmiko import ConnectHandler juniper_vMX = { 'device_type': 'juniper', 'ip': '192.168.13.11', 'username': 'juniper', 'password': 'Juniper' } net_connect = ConnectHandler(**juniper_vMX) output = net_connect.send_command(\"show interface terse\") print(\"Juniper IP:\\n\\n\"+output+\"\\n---------------------------------------\\n\") huawei_vrp = { 'device_type': 'huawei', 'ip': '192.168.13.22', 'username': 'huawei', 'password': 'Admin@1231' } net_connect = ConnectHandler(**huawei_vrp) output = net_connect.send_command(\"display ip int br\") print(\"Huawei IP:\\n\\n\"+output+\"\\n---------------------------------------\\n\") ios_xr = { 'device_type': 'cisco_xr', 'ip': '192.168.13.33', 'username': 'cisco', 'password': 'cisco' } net_connect = ConnectHandler(**ios_xr) output = net_connect.send_command(\"show ip int br\") print(\"Cisco IP:\\n\\n\"+output+\"\\n---------------------------------------\\n\") ","date":"2022-05-15","objectID":"/posts/automation-tools/automation-tools/:2:2","tags":["EVE-NG","Automation","Nornir"],"title":"Automation tools: Paramiko, Netmiko, NAPALM, Ansible, Nornir or ...?","uri":"/posts/automation-tools/automation-tools/"},{"categories":["Network"],"content":"2.3 NAPALM My plan was to retrieve BGP neighbor info with NAPALM. NAPALM is very straightforward tool IF all of your device types are suppored. However that’s not the case in our scenario. Huawei routers are not officially supported by NAPALM, there is a community NAPALM library (NAPALM-Huawei-VRP), but that only has very limited functions built-in. My only option was to write my own functions based on the community version, while I was researching, found out I wasn’t the only one who has attempted this. Michael did some heavy lifting but his code was still missing some parts. Expand the following code snippet for BGP neighbor implementation for Huawei VRP platform. My github repo has complete code so that you don’t have to reinvent the wheel. @staticmethod def bgp_time_conversion(bgp_uptime): \"\"\" Convert string time to seconds. Examples 00:14:23 00:13:40 00:00:21 00:00:13 00:00:49 1d11h 1d17h 1w0d 8w5d 1y28w never \"\"\" bgp_uptime = bgp_uptime.strip() uptime_letters = set(['w', 'h', 'd', 'm']) if 'never' in bgp_uptime: return -1 elif ':' in bgp_uptime: times = bgp_uptime.split(\":\") times = [int(x) for x in times] hours, minutes, seconds = times return (hours * 3600) + (minutes * 60) + seconds # Check if any letters 'w', 'h', 'd' are in the time string elif uptime_letters \u0026 set(bgp_uptime): form0 = r'(\\d+)h(\\d+)m' # 03h21m form1 = r'(\\d+)d(\\d+)h' # 1d17h form2 = r'(\\d+)w(\\d+)d' # 8w5d form3 = r'(\\d+)y(\\d+)w' # 1y28w match = re.search(form0, bgp_uptime) if match: hours = int(match.group(1)) minutes = int(match.group(2)) return (hours * 3600) + (minutes * 60) match = re.search(form1, bgp_uptime) if match: days = int(match.group(1)) hours = int(match.group(2)) return (days * DAY_SECONDS) + (hours * 3600) match = re.search(form2, bgp_uptime) if match: weeks = int(match.group(1)) days = int(match.group(2)) return (weeks * WEEK_SECONDS) + (days * DAY_SECONDS) match = re.search(form3, bgp_uptime) if match: years = int(match.group(1)) weeks = int(match.group(2)) return (years * YEAR_SECONDS) + (weeks * WEEK_SECONDS) raise ValueError(\"Unexpected value for BGP uptime string: {}\".format(bgp_uptime)) ## custom bgp config for VRP, reference:https://codingnetworks.blog/napalm-network-automation-python-collect-data-from-multiple-vendors/ def get_bgp_neighbors(self): \"\"\" Returns a dictionary of dictionaries. The keys for the first dictionary will be the vrf (global if no vrf). The inner dictionary will contain the following data for each vrf: * router_id * peers - another dictionary of dictionaries. Outer keys are the IPs of the neighbors. \\ The inner keys are: * local_as (int) * remote_as (int) * remote_id - peer router id * is_up (True/False) * is_enabled (True/False) * description (string) * uptime (int in seconds) * address_family (dictionary) - A dictionary of address families available for the \\ neighbor. So far it can be 'ipv4' or 'ipv6' * received_prefixes (int) * accepted_prefixes (int) * sent_prefixes (int) Note, if is_up is False and uptime has a positive value then this indicates the uptime of the last active BGP session. Example:: { \"global\": { \"router_id\": \"10.0.1.1\", \"peers\": { \"10.0.0.2\": { \"local_as\": 65000, \"remote_as\": 65000, \"remote_id\": \"10.0.1.2\", \"is_up\": True, \"is_enabled\": True, \"description\": \"internal-2\", \"uptime\": 4838400, \"address_family\": { \"ipv4\": { \"sent_prefixes\": 637213, \"accepted_prefixes\": 3142, \"received_prefixes\": 3142 }, \"ipv6\": { \"sent_prefixes\": 36714, \"accepted_prefixes\": 148, \"received_prefixes\": 148 } } } } } } \"\"\" afi_supported = { \"Ipv6 Unicast\" : \"ipv6 unicast\", \"Ipv4 Unicast\" : \"ipv4 unicast\", \"Vpnv4 All\" : \"vpnv4 unicast\", \"Vpnv6 All\" : \"vpnv6 unicast\" } bgp_neighbors = {} command_bgp = \"display bgp all summary\" output = self.device.send_command(command_bgp) if output == \"\": return bgp_neighbors ASN_REGEX = r\"[\\d\\.]+\" IP_ADDR_REGEX = r\"\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\" IPV4_ADDR_REGEX = IP_ADDR_REGEX IPV6_ADDR_REGEX_1 = r\"::\" IPV6_ADDR_REGEX_2 = r\"[0-9a-fA-F:]{1,39}::[0-9a-fA-F:]{1,39}\" IPV6_AD","date":"2022-05-15","objectID":"/posts/automation-tools/automation-tools/:2:3","tags":["EVE-NG","Automation","Nornir"],"title":"Automation tools: Paramiko, Netmiko, NAPALM, Ansible, Nornir or ...?","uri":"/posts/automation-tools/automation-tools/"},{"categories":["Network"],"content":"2.4 Nornir 2.4.1 Initializing Nornir In this lab, we are using SimpleInventory plugin, which stores all the relevant data in three files (hosts.yaml, groups.yaml, defaults,yaml). \r\r\r$(function() {\r$( \"#tabs, #tabs1, #tabs2, #tabs3, #tabs4, #tabs5, #tabs6, #tabs7, #tabs8\" ).tabs();\r});\r\r hosts.yaml \rgroups.yaml \rdefaults.yaml \r\r ---router1:hostname:192.168.13.11username:juniperpassword:Junipergroups:- juniperrouter2:hostname:192.168.13.22username:huaweipassword:Admin@1231 groups:- huaweirouter2`:hostname:192.168.13.22username:huaweipassword:Admin@1231 groups:- huawei_vrpv8router3:hostname:192.168.13.33username:ciscopassword:ciscogroups:- cisco \r\r ---cisco:platform:ios-xrhuawei:platform:huawei_vrphuawei_vrpv8:platform:huawei_vrpv8juniper:platform:junos \r\r ---username:juniperpassword:Juniper \r\r\r .ui-tabs .ui-tabs-nav\r{\rbackground: #3b4252!important;\rpadding: 0px!important;\r}\r.ui-state-default{\rbackground: #2e3440!important;\rborder:0px!important;\r}\r.ui-state-default a {\rcolor:#b1b0b0!important;\rfont-family: Monaco, Comic Code Ligatures, Arial;\rfont-size:14px;\rfont-weight:bold;\r}\r.ui-widget-content {\rbackground: #3b4252!important;\rpadding: 0px!important;\rborder:0px!important;\r}\r.ui-tabs-active{\rbackground: #282d37!important;\r}\r.ui-tabs-nav .ui-state-active a {\rcolor:#699ec1!important;\rfont-family: Monaco, Comic Code Ligatures, Arial;\rfont-size:14px;\rfont-weight:bold;\r}\r.ui-tabs .ui-tabs-panel {\rbackground: #3b4252!important;\rborder:1px!important;\r}\r.ui-widget-header{\rborder:0px!important;\r}\r.single .content ul, .single .content ol{\rmargin-bottom:-10px;\r}\r\rWe need a config.yaml file to let Nornir know we have inventory files ready for Nornir. You can change multi-thread option in this file as well. #config.yaml---inventory:plugin:SimpleInventoryoptions:host_file:\"hosts.yaml\"group_file:\"groups.yaml\"defaults_file:\"defaults.yaml\"runner:plugin:threadedoptions:num_workers:100 Now we can create Nornir object like below: from nornir import InitNornir nr = InitNornir(config_file=\"config.yaml\") As I already mentioned, Nornir supports third-party plugins such as Netmiko, Scrapli, NAPALM, Ansible, Jinja2, Netbox, etc. Let’s see how we can use Netmiko and NAPALM within Nornir. 2.4.2 Nornir with Netmiko plugin First off, let’s try Netmiko plugin. Let’s make it more fun with the use of Nornir filter function, to select specific group of routers in our inventory and show BGP neighbor info on that router with Netmiko. Getting command result requires importing the plugin and running only one line of code. #nornir_netmiko_test.py from nornir import InitNornir from nornir_netmiko import netmiko_send_command from nornir_utils.plugins.functions import print_result from nornir.core.filter import F nr = InitNornir(config_file=\"config.yaml\") group1 = nr.filter(F(groups__contains=\"huawei_vrpv8\")) results = group1.run(netmiko_send_command, command_string='dis bgp peer') print_result(results) Result from above code: 2.4.3 Nornir with NAPALM plugin Now, let’s try NAPALM plugin for Nornir. This time, I’m using ~F function to filter routers that are not “huawei_vrpv8”. Then run NAPALM getters to retrieve BGP neighbor info. #nornir_napalm_test.py from nornir import InitNornir from nornir_napalm.plugins.tasks import napalm_get from nornir_utils.plugins.functions import print_result from nornir.core.filter import F nr = InitNornir(config_file=\"config.yaml\", dry_run=True) group2 = nr.filter(~F(groups__contains=\"huawei_vrpv8\")) results = group2.run(task=napalm_get, getters=[\"bgp_neighbors\"]) print_result(results) Again, NAPALM plugin is capable of returning structured data for easier manipulation of the data. Bug?\r\rDid you notice I had duplicates in hosts.yaml and groups.yaml file? That’s due to Netmiko and NAPALM uses different platform name for Huawei VRP routers, and a little workaround was needed to amend the incompatibility.\r\r This lab is merely scratching the surface of what Nornir and other automation tools can achieve. ","date":"2022-05-15","objectID":"/posts/automation-tools/automation-tools/:2:4","tags":["EVE-NG","Automation","Nornir"],"title":"Automation tools: Paramiko, Netmiko, NAPALM, Ansible, Nornir or ...?","uri":"/posts/automation-tools/automation-tools/"},{"categories":["Network"],"content":"3 Which automation tool to use? Nobody can tell you which automation tool is the best; it all depends on the scenario. A great way to start learning automation is Python combined with Netmiko. Build a lab on either GNS3 or EVE-NG and writing some scripts will build your confidence over time. Although both Netmiko and NAPALM are great in lab environment, with real-world use cases, you may need to take scalability and performance into consideration. Ansible and Nornir are more capable in real-world production networks. Of course, you can make your own multiprocessing/multithreading script with lower level automation tools as well, but it makes the code more complicated than necessary. My personal choice of automation tool at the moment is Nornir, as it gives me the flexibility to write in Python, also it’s very powerful when combined with various third-party tools. And it’s fast, according to this speed challange. ","date":"2022-05-15","objectID":"/posts/automation-tools/automation-tools/:3:0","tags":["EVE-NG","Automation","Nornir"],"title":"Automation tools: Paramiko, Netmiko, NAPALM, Ansible, Nornir or ...?","uri":"/posts/automation-tools/automation-tools/"},{"categories":["Network"],"content":"EVE-NG lab with Cisco IOS-XR, Juniper vMX and Huawei VRP(NE40E).","date":"2022-05-06","objectID":"/posts/eve-ng/eve-ng/","tags":["EVE-NG"],"title":"EVE-NG lab with Cisco IOS-XR, Juniper vMX and Huawei VRP(NE40E)","uri":"/posts/eve-ng/eve-ng/"},{"categories":["Network"],"content":" In this series of blog posts, I will walk through network automation with Nornir framework, but before we can dive into the good stuff, let’s build a lab that I can run automation on. ","date":"2022-05-06","objectID":"/posts/eve-ng/eve-ng/:0:0","tags":["EVE-NG"],"title":"EVE-NG lab with Cisco IOS-XR, Juniper vMX and Huawei VRP(NE40E)","uri":"/posts/eve-ng/eve-ng/"},{"categories":["Network"],"content":"1 Why using 3 different platform for the lab? It’s very common to use network equipment from more than one vendor (at least for ISPs). From my own limited experience, I’ve spent most time configuring and troubleshooting on Cisco IOS-XR and Huawei VRP routers for daily job. And invested quite a lot of time on Cisco IOS for my CCIE-RS exam. But didn’t have chance to work on Junos as much. Just like Chris mentioned in his blog post, I kind of hate to use Junos, guess it just didn’t click for me yet. Automating network equipment of multiple vendors is a painful process, especially when it comes to the ones that doesn’t have too much global presence, or the ones that are banned (*cough* Huawei *cough*). Most of modern automation tools have limited support for Huawei. Let’s see if I can have Nornir to work with Huawei VRP routers and get some automation action going. ","date":"2022-05-06","objectID":"/posts/eve-ng/eve-ng/:1:0","tags":["EVE-NG"],"title":"EVE-NG lab with Cisco IOS-XR, Juniper vMX and Huawei VRP(NE40E)","uri":"/posts/eve-ng/eve-ng/"},{"categories":["Network"],"content":"2 Lab details I prefer EVE-NG over GNS3, since I used to lab a lot on it when I was preparing for CCIE exam, and I will be using community version (version v2.0.3-112) for this lab. ","date":"2022-05-06","objectID":"/posts/eve-ng/eve-ng/:2:0","tags":["EVE-NG"],"title":"EVE-NG lab with Cisco IOS-XR, Juniper vMX and Huawei VRP(NE40E)","uri":"/posts/eve-ng/eve-ng/"},{"categories":["Network"],"content":"2.1 Import router images and get it running First thing first, we need to import router images to EVE-NG. It’s a bit of a hassle to install these images, but definitely not rocket science. Follow official guides for Juniper vMX \u0026 Cisco IOS-XRv and this post for Huawei VRP. Tip\r\rFor Junos: log in to VCP as root, type “cli” to enter Junos CLI\r\r Off to a good start, all 3 images are running, let's see the version info for each router: Juniper Junos: 20.4R3.8 root@vMX-R1\u003e show version Hostname: vMX-R1 Model: vmx Junos: 20.4R3.8 JUNOS OS Kernel 64-bit [20210618.f43645e_builder_stable_11-204ab] JUNOS OS libs [20210618.f43645e_builder_stable_11-204ab] ... Huawei VRP: 8.180 \u003cHuawei-R2\u003edisplay ver Huawei Versatile Routing Platform Software VRP (R) software, Version 8.180 (NE40E V800R011C00SPC607B607) Copyright (C) 2012-2018 Huawei Technologies Co., Ltd. HUAWEI NE40E uptime is 0 day, 14 hours, 3 minutes SVRP Platform Version 1.0 Cisco IOS-XR: 6.1.3 RP/0/0/CPU0:IOS-XR-R3#show version Thu May 5 08:09:51.127 UTC Cisco IOS XR Software, Version 6.1.3[Default] Copyright (c) 2017 by Cisco Systems, Inc. ROM: GRUB, Version 1.99(0), DEV RELEASE ... ","date":"2022-05-06","objectID":"/posts/eve-ng/eve-ng/:2:1","tags":["EVE-NG"],"title":"EVE-NG lab with Cisco IOS-XR, Juniper vMX and Huawei VRP(NE40E)","uri":"/posts/eve-ng/eve-ng/"},{"categories":["Network"],"content":"2.2 Build a lab in EVE-NG It’s time to build a simple lab around them to see if they work as intended. Interface IP addresses between Router X,Y is set to 192.168.XY.X/24 format. For connection between R1 and R2, it will be 192.168.12.1/24 for R1 and 192.168.12.2/24 for R2. And all 3 routers have lo0 interface with X.X.X.X/32 address assigned. Juniper vMX tip\r\rYou need to add both VCP and VFP, connect them together through em1 interface.\r\r EVE-NG Topology ","date":"2022-05-06","objectID":"/posts/eve-ng/eve-ng/:2:2","tags":["EVE-NG"],"title":"EVE-NG lab with Cisco IOS-XR, Juniper vMX and Huawei VRP(NE40E)","uri":"/posts/eve-ng/eve-ng/"},{"categories":["Network"],"content":"2.3 Change hostname \u0026 Configure interfaces Let’s configure interface IP addresses and do bunch of pings to make sure they are connected. \r\r\r\r$(function() {\r$( \"#tabs, #tabs1, #tabs2, #tabs3, #tabs4, #tabs5, #tabs6, #tabs7, #tabs8\" ).tabs();\r});\r\r Juniper \rHuawei \rCisco \r\r set system root-authentication plain-text-password set groups router system host-name vMX-R1 set apply-groups router set interfaces ge-0/0/0 unit 0 family inet address 192.168.12.1/24 set interfaces ge-0/0/1 unit 0 family inet address 192.168.13.1/24 set interfaces lo0 unit 0 family inet address 1.1.1.1/32 commit \r\r \u003cHUAWEI\u003esystem-view [~HUAWEI]sysname Huawei-R2 [~Huawei-R2]interface ether1/0/0 [~Huawei-R2-Ethernet1/0/0]ip address 192.168.12.2 255.255.255.0 [~Huawei-R2]interface ether1/0/1 [~Huawei-R2-Ethernet1/0/0]ip address 192.168.23.2 255.255.255.0 [~Huawei-R2]interface LoopBack0 [~Huawei-R2-LoopBack0]ip address 2.2.2.2 255.255.255.255 [~Huawei-R2-LoopBack0]commit \r\r RP/0/0/CPU0:ios#conf t RP/0/0/CPU0:ios(config)#hostname IOS-XR-R3 RP/0/0/CPU0:IOS-XR-R3(config)#int g0/0/0/0 RP/0/0/CPU0:IOS-XR-R3(config-if)#ipv4 address 192.168.13.3 255.255.255.0 RP/0/0/CPU0:IOS-XR-R3(config-if)#no shut RP/0/0/CPU0:IOS-XR-R3(config-if)#int g0/0/0/1 RP/0/0/CPU0:IOS-XR-R3(config-if)#ipv4 address 192.168.23.3 255.255.255.0 RP/0/0/CPU0:IOS-XR-R3(config-if)#no shut RP/0/0/CPU0:IOS-XR-R3(config-if)#int lo0 RP/0/0/CPU0:IOS-XR-R3(config-if)#ipv4 address 3.3.3.3 255.255.255.255 RP/0/0/CPU0:IOS-XR-R3(config-if)#commit \r\r\r .ui-tabs .ui-tabs-nav\r{\rbackground: #3b4252!important;\rpadding: 0px!important;\r}\r.ui-state-default{\rbackground: #2e3440!important;\rborder:0px!important;\r}\r.ui-state-default a {\rcolor:#b1b0b0!important;\rfont-family: Monaco, Comic Code Ligatures, Arial;\rfont-size:14px;\rfont-weight:bold;\r}\r.ui-widget-content {\rbackground: #3b4252!important;\rpadding: 0px!important;\rborder:0px!important;\r}\r.ui-tabs-active{\rbackground: #282d37!important;\r}\r.ui-tabs-nav .ui-state-active a {\rcolor:#699ec1!important;\rfont-family: Monaco, Comic Code Ligatures, Arial;\rfont-size:14px;\rfont-weight:bold;\r}\r.ui-tabs .ui-tabs-panel {\rbackground: #3b4252!important;\rborder:1px!important;\r}\r.ui-widget-header{\rborder:0px!important;\r}\r.single .content ul, .single .content ol{\rmargin-bottom:-10px;\r}\r\r","date":"2022-05-06","objectID":"/posts/eve-ng/eve-ng/:2:3","tags":["EVE-NG"],"title":"EVE-NG lab with Cisco IOS-XR, Juniper vMX and Huawei VRP(NE40E)","uri":"/posts/eve-ng/eve-ng/"},{"categories":["Network"],"content":"2.4 iBGP configuration (Full-mesh) Setting up BGP for Cisco and Huawei was very straight-forward. Junos is a little tricky, you have to add AS number under “routing-options” before you can configure iBGP commands. \r\r\r\r$(function() {\r$( \"#tabs, #tabs1, #tabs2, #tabs3, #tabs4, #tabs5, #tabs6, #tabs7, #tabs8\" ).tabs();\r});\r\r Juniper \rHuawei \rCisco \r\r root@vMX-R1\u003e show configuration routing-options { autonomous-system 123; } protocols { bgp { group ibgp-peers { type internal; neighbor 192.168.12.2; neighbor 192.168.13.3; } } } \r\r \u003cHuawei-R2\u003edis current-configuration configuration bgp bgp 123 peer 192.168.12.1 as-number 123 peer 192.168.23.3 as-number 123 # ipv4-family unicast undo synchronization peer 192.168.12.1 enable peer 192.168.23.3 enable \r\r RP/0/0/CPU0:IOS-XR-R3#sh run router bgp router bgp 123 address-family ipv4 unicast ! neighbor 192.168.13.1 remote-as 123 address-family ipv4 unicast ! ! neighbor 192.168.23.2 remote-as 123 address-family ipv4 unicast ! ! ! \r\r\r .ui-tabs .ui-tabs-nav\r{\rbackground: #3b4252!important;\rpadding: 0px!important;\r}\r.ui-state-default{\rbackground: #2e3440!important;\rborder:0px!important;\r}\r.ui-state-default a {\rcolor:#b1b0b0!important;\rfont-family: Monaco, Comic Code Ligatures, Arial;\rfont-size:14px;\rfont-weight:bold;\r}\r.ui-widget-content {\rbackground: #3b4252!important;\rpadding: 0px!important;\rborder:0px!important;\r}\r.ui-tabs-active{\rbackground: #282d37!important;\r}\r.ui-tabs-nav .ui-state-active a {\rcolor:#699ec1!important;\rfont-family: Monaco, Comic Code Ligatures, Arial;\rfont-size:14px;\rfont-weight:bold;\r}\r.ui-tabs .ui-tabs-panel {\rbackground: #3b4252!important;\rborder:1px!important;\r}\r.ui-widget-header{\rborder:0px!important;\r}\r.single .content ul, .single .content ol{\rmargin-bottom:-10px;\r}\r\r","date":"2022-05-06","objectID":"/posts/eve-ng/eve-ng/:2:4","tags":["EVE-NG"],"title":"EVE-NG lab with Cisco IOS-XR, Juniper vMX and Huawei VRP(NE40E)","uri":"/posts/eve-ng/eve-ng/"},{"categories":["Network"],"content":"2.5 Advertise loopback address to iBGP peers Advertising lo0 address is very simple for both Cisco and Huawei, one network command will do the job. However, with Junos you have to configure a policy and apply it to the BGP config. \r\r\r\r$(function() {\r$( \"#tabs, #tabs1, #tabs2, #tabs3, #tabs4, #tabs5, #tabs6, #tabs7, #tabs8\" ).tabs();\r});\r\r Juniper \rHuawei \rCisco \r\r set policy-options policy-statement advertise.lo0 term 1 from route-filter 1.1.1.1/32 exact set policy-options policy-statement advertise.lo0 term 1 then accept set protocols bgp group ibgp-peers export advertise.lo0 \r\r [~Huawei-R2]bgp 123 [~Huawei-R2-bgp]network 2.2.2.2 32 \r\r router bgp 123 address-family ipv4 unicast network 3.3.3.3 255.255.255.255 \r\r\r .ui-tabs .ui-tabs-nav\r{\rbackground: #3b4252!important;\rpadding: 0px!important;\r}\r.ui-state-default{\rbackground: #2e3440!important;\rborder:0px!important;\r}\r.ui-state-default a {\rcolor:#b1b0b0!important;\rfont-family: Monaco, Comic Code Ligatures, Arial;\rfont-size:14px;\rfont-weight:bold;\r}\r.ui-widget-content {\rbackground: #3b4252!important;\rpadding: 0px!important;\rborder:0px!important;\r}\r.ui-tabs-active{\rbackground: #282d37!important;\r}\r.ui-tabs-nav .ui-state-active a {\rcolor:#699ec1!important;\rfont-family: Monaco, Comic Code Ligatures, Arial;\rfont-size:14px;\rfont-weight:bold;\r}\r.ui-tabs .ui-tabs-panel {\rbackground: #3b4252!important;\rborder:1px!important;\r}\r.ui-widget-header{\rborder:0px!important;\r}\r.single .content ul, .single .content ol{\rmargin-bottom:-10px;\r}\r\rLet’s make sure BGP peering is correctly established and they are receving prefixes from each other. \r\r\r\r$(function() {\r$( \"#tabs, #tabs1, #tabs2, #tabs3, #tabs4, #tabs5, #tabs6, #tabs7, #tabs8\" ).tabs();\r});\r\r Juniper \rHuawei \rCisco \r\r \r \r \r\r .ui-tabs .ui-tabs-nav\r{\rbackground: #3b4252!important;\rpadding: 0px!important;\r}\r.ui-state-default{\rbackground: #2e3440!important;\rborder:0px!important;\r}\r.ui-state-default a {\rcolor:#b1b0b0!important;\rfont-family: Monaco, Comic Code Ligatures, Arial;\rfont-size:14px;\rfont-weight:bold;\r}\r.ui-widget-content {\rbackground: #3b4252!important;\rpadding: 0px!important;\rborder:0px!important;\r}\r.ui-tabs-active{\rbackground: #282d37!important;\r}\r.ui-tabs-nav .ui-state-active a {\rcolor:#699ec1!important;\rfont-family: Monaco, Comic Code Ligatures, Arial;\rfont-size:14px;\rfont-weight:bold;\r}\r.ui-tabs .ui-tabs-panel {\rbackground: #3b4252!important;\rborder:1px!important;\r}\r.ui-widget-header{\rborder:0px!important;\r}\r.single .content ul, .single .content ol{\rmargin-bottom:-10px;\r}\r\r","date":"2022-05-06","objectID":"/posts/eve-ng/eve-ng/:2:5","tags":["EVE-NG"],"title":"EVE-NG lab with Cisco IOS-XR, Juniper vMX and Huawei VRP(NE40E)","uri":"/posts/eve-ng/eve-ng/"},{"categories":["Network"],"content":"3 Complete configs Looks great so far, the following is full configuration for this lab. \r\r\r\r$(function() {\r$( \"#tabs, #tabs1, #tabs2, #tabs3, #tabs4, #tabs5, #tabs6, #tabs7, #tabs8\" ).tabs();\r});\r\r Juniper \rHuawei \rCisco \r\r root@vMX-R1\u003e show configuration groups { router { system { host-name vMX-R1; } } } apply-groups router; system { root-authentication { encrypted-password \"$6$PJBo9jFx$C2/jRVRHt/6wIJeRzJ4BJH6i.iDpoM5ZCkKkEMyUsnn9nPSDQcccK4mmvd8IGt.21Gp9x3bg3fZpmp6L/HxBI.\"; ## SECRET-DATA } } interfaces { ge-0/0/0 { unit 0 { family inet { address 192.168.12.1/24; } } } ge-0/0/1 { unit 0 { family inet { address 192.168.13.1/24; } } } lo0 { unit 0 { family inet { address 1.1.1.1/32; } } } } policy-options { policy-statement advertise.lo0 { term 1 { from { route-filter 1.1.1.1/32 exact; } then accept; } } } routing-options { autonomous-system 123; } protocols { router-advertisement { interface fxp0.0; } bgp { group ibgp-peers { type internal; export advertise.lo0; neighbor 192.168.12.2; neighbor 192.168.13.3; } } } \r\r \u003cHuawei-R2\u003edis current-configuration sysname Huawei-R2 # interface Ethernet1/0/0 undo shutdown ip address 192.168.12.2 255.255.255.0 # interface Ethernet1/0/1 undo shutdown ip address 192.168.23.2 255.255.255.0 # interface LoopBack0 ip address 2.2.2.2 255.255.255.255 # bgp 123 peer 192.168.12.1 as-number 123 peer 192.168.23.3 as-number 123 # ipv4-family unicast undo synchronization network 2.2.2.2 255.255.255.255 peer 192.168.12.1 enable peer 192.168.23.3 enable \r\r RP/0/0/CPU0:IOS-XR-R3#sh run hostname IOS-XR-R3 interface Loopback0 ipv4 address 3.3.3.3 255.255.255.255 ! interface GigabitEthernet0/0/0/0 ipv4 address 192.168.13.3 255.255.255.0 ! interface GigabitEthernet0/0/0/1 ipv4 address 192.168.23.3 255.255.255.0 ! router bgp 123 address-family ipv4 unicast network 3.3.3.3/32 ! neighbor 192.168.13.1 remote-as 123 address-family ipv4 unicast ! ! neighbor 192.168.23.2 remote-as 123 address-family ipv4 unicast ! ! ! \r\r\r .ui-tabs .ui-tabs-nav\r{\rbackground: #3b4252!important;\rpadding: 0px!important;\r}\r.ui-state-default{\rbackground: #2e3440!important;\rborder:0px!important;\r}\r.ui-state-default a {\rcolor:#b1b0b0!important;\rfont-family: Monaco, Comic Code Ligatures, Arial;\rfont-size:14px;\rfont-weight:bold;\r}\r.ui-widget-content {\rbackground: #3b4252!important;\rpadding: 0px!important;\rborder:0px!important;\r}\r.ui-tabs-active{\rbackground: #282d37!important;\r}\r.ui-tabs-nav .ui-state-active a {\rcolor:#699ec1!important;\rfont-family: Monaco, Comic Code Ligatures, Arial;\rfont-size:14px;\rfont-weight:bold;\r}\r.ui-tabs .ui-tabs-panel {\rbackground: #3b4252!important;\rborder:1px!important;\r}\r.ui-widget-header{\rborder:0px!important;\r}\r.single .content ul, .single .content ol{\rmargin-bottom:-10px;\r}\r\r","date":"2022-05-06","objectID":"/posts/eve-ng/eve-ng/:3:0","tags":["EVE-NG"],"title":"EVE-NG lab with Cisco IOS-XR, Juniper vMX and Huawei VRP(NE40E)","uri":"/posts/eve-ng/eve-ng/"},{"categories":["Network"],"content":"4 What’s next \u0026 TIL Success\r\rInitial part of the lab is finished.\r\r ","date":"2022-05-06","objectID":"/posts/eve-ng/eve-ng/:4:0","tags":["EVE-NG"],"title":"EVE-NG lab with Cisco IOS-XR, Juniper vMX and Huawei VRP(NE40E)","uri":"/posts/eve-ng/eve-ng/"},{"categories":["Network"],"content":"4.1 Next step I’ll add bits and pieces to make the lab suitable for automation, or completely overhaul the entire topology, just for the sake of messing around. 😂 ","date":"2022-05-06","objectID":"/posts/eve-ng/eve-ng/:4:1","tags":["EVE-NG"],"title":"EVE-NG lab with Cisco IOS-XR, Juniper vMX and Huawei VRP(NE40E)","uri":"/posts/eve-ng/eve-ng/"},{"categories":["Network"],"content":"4.2 TIL TIL section is dedicated to the things that I’ve learned while writing blog posts, they can be either very trivial commands, or more complex concepts. TIL : Today I Learned\r\rTo show / compare uncommitted changes, simply run these commands: show | compare (Junos) display configuration candidate changes (Huawei VRP) show commit changes diff (Cisco IOS-XR) \r\r ","date":"2022-05-06","objectID":"/posts/eve-ng/eve-ng/:4:2","tags":["EVE-NG"],"title":"EVE-NG lab with Cisco IOS-XR, Juniper vMX and Huawei VRP(NE40E)","uri":"/posts/eve-ng/eve-ng/"},{"categories":null,"content":"About me ","date":"2021-07-01","objectID":"/about/:0:0","tags":null,"title":"","uri":"/about/"},{"categories":null,"content":"Hi, my name is Kevin (Xun) Jin. ","date":"2021-07-01","objectID":"/about/:0:1","tags":null,"title":"","uri":"/about/"},{"categories":null,"content":"I’m a network engineer by day 🖥️, $dad^2$ by night 👨‍👩‍👧‍👦, and this is my technical blog. Main purpose of this site is to record and share my learning journey. I’m very passionate about tech in general, constantly discovering, building and fixing tech related stuff. Some of my hobbies:\r\r⚽ 📷 🎹 🚗 🎮 🛹 🏂 🏄‍♂️\r\r ","date":"2021-07-01","objectID":"/about/:0:2","tags":null,"title":"","uri":"/about/"}]